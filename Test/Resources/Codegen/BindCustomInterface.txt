module test;
using test::*;
using system::*;

var s = "";

interface ISummer
{
	func GetSum() : int;
	event SumChanged();
	prop Sum : int {GetSum : SumChanged}
}

interface IAdder : ISummer
{
	func Add(value : int) : void;
}

func Bind(summer : ISummer^) : void
{
	var subscription = bind(summer.Sum);
	var listener = subscription.Subscribe(
		func (value : object) : void
		{
			s = $"$(s)[$(cast int value)]";
		}
	);
}

func Execute(adder : IAdder^) : void
{
	Bind(adder);
	for(x in range [1, 5])
	{
		adder.Add(x);
	}
}

func main() : string
{
	var sum = {0};
	Execute(new IAdder^
	{
		func GetSum() : int
		{
			return sum[0];
		}

		func Add(value : int) : void
		{
			sum[0] = sum[0] + value;
			SumChanged();
		}
	});
	return s;
}