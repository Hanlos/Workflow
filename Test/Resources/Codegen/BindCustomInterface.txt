module test;
using test::*;
using system::*;

var s = "";

interface IAdder
{
	func Add(value : int) : void;
	func GetSum() : int;
	event SumChanged();
	prop Sum : int {GetSum : SumChanged}
}

func Callback(value : object) : void
{
	s = $"$(s)[$(cast int value)]";
}

func Execute(adder : IAdder^) : void
{
	var subscription = bind(adder.Sum);
	var listener = subscription.Subscribe(callback);

	for(x in range [1, 5])
	{
		adder.Add(x);
	}
}

func main() : string
{
	var x = new ObservableValue^();
	var y = new ObservableValue^();
	var z = new ObservableValue^();
	var subscription = bind(x.Value + y.Value + z.Value);
	var listener = subscription.Subscribe(Callback);

	x.Value = 10;
	y.Value = 20;
	z.Value = 30;
	
	subscription.Close();
	return s;
}