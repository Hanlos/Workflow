module test;
using test::*;
using system::*;
using calculator::*;

namespace calculator
{
	@cpp:File("WorkflowAttributes_Expression")
	class Expression
	{
	}
	
	@cpp:File("WorkflowAttributes_NumberExpression")
	class NumberExpression : Expression
	{
		@cpp:Private
		var value : int = 0;
		func GetValue() : int { return value; }
		func SetValue(_value : int) : void { value = _value; }
		prop Value : int {GetValue, SetValue}

		new (_value : int)
		{
			value = _value;
		}
	}
	
	@cpp:File("WorkflowAttributes_BinaryExpression")
	class BinaryExpression : Expression
	{
		enum BinaryOperator
		{
			Add = 0,
			Sub = 1,
			Mul = 2,
			Div = 3,
		}
		
		@cpp:Private
		var op : BinaryOperator = Add;
		func GetOp() : BinaryOperator { return op; }
		func SetOp(_value : BinaryOperator) : void { op = _value; }
		prop Operator : BinaryOperator {GetOp, SetOp}

		@cpp:Private
		var left : Expression^ = null;
		func GetLeft() : Expression^ { return left; }
		func SetLeft(_value : Expression^) : void { left = _value; }
		prop Left : Expression^ {GetLeft, SetLeft}

		@cpp:Private
		var right : Expression^ = null;
		func GetRight() : Expression^ { return right; }
		func SetRight(_value : Expression^) : void { right = _value; }
		prop Right : Expression^ {GetRight, SetRight}

		new (_left : Expression^, _op : BinaryOperator, _right : Expression^)
		{
			left = _left;
			op = _op;
			right = _right;
		}
	}
}

func Print(expr : Expression^) : string
{
	if (var ne : NumberExpression^ = expr)
	{
		return cast string ne.Value;
	}
	else if (var be : BinaryExpression^ = expr)
	{
		var op = "";
		switch(be.Operator)
		{
		case Add: { op = "+"; }
		case Sub: { op = "-"; }
		case Mul: { op = "*"; }
		case Div: { op = "/"; }
		}
		return $"($(Print(be.Left)) $(op) $(Print(be.Right)))";
	}
	else
	{
		raise "Unrecognized expression type.";
	}
}

func Evaluate(expr : Expression^) : int
{
	if (var ne : NumberExpression^ = expr)
	{
		return ne.Value;
	}
	else if (var be : BinaryExpression^ = expr)
	{
		var left = Evaluate(be.Left);
		var right = Evaluate(be.Right);
		switch(be.Operator)
		{
		case Add: { return left + right; }
		case Sub: { return left - right; }
		case Mul: { return left * right; }
		case Div: { return left / right; }
		}
		raise "Unrecognized binary operator.";
	}
	else
	{
		raise "Unrecognized expression type.";
	}
}

func main():string
{
	var expr = new BinaryExpression^(
		new BinaryExpression^(
			new NumberExpression^(1),
			Add,
			new NumberExpression^(2)
			),
		Mul,
		new BinaryExpression^(
			new NumberExpression^(3),
			Add,
			new NumberExpression^(4)
			)
		);

	return $"$(Print(expr)) = $(Evaluate(expr))";
}