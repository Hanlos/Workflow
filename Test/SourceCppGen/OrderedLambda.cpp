/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/OrderedLambda.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "OrderedLambda.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::OrderedLambda::
#define GLOBAL_NAME ::vl_workflow_global::OrderedLambda::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::OrderedLambda::Instance()
#define USERIMPL(...)

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_OrderedLambda)
	vl_workflow_global::OrderedLambda instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS
	FINALIZE_GLOBAL_STORAGE_CLASS
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_OrderedLambda)

namespace vl_workflow_global
{
/***********************************************************************
Closure Definitions
***********************************************************************/

	struct __vwsno1_OrderedLambda_Adder_
	{
		::vl::vint32_t x;

		__vwsno1_OrderedLambda_Adder_(::vl::vint32_t __vwsnctor_x);

		::vl::vint32_t operator()(::vl::vint32_t __vwsno_1) const;
	};

	struct __vwsno2_OrderedLambda_Adder_
	{
		::vl::vint32_t __vwsno_1;

		__vwsno2_OrderedLambda_Adder_(::vl::vint32_t __vwsnctor___vwsno_1);

		::vl::vint32_t operator()(::vl::vint32_t __vwsno_2) const;
	};

	//-------------------------------------------------------------------

	__vwsno1_OrderedLambda_Adder_::__vwsno1_OrderedLambda_Adder_(::vl::vint32_t __vwsnctor_x)
		:x(__vwsnctor_x)
	{
	}

	::vl::vint32_t __vwsno1_OrderedLambda_Adder_::operator()(::vl::vint32_t __vwsno_1) const
	{
		return ((__vwsno_1 * 0) + GLOBAL_NAME Apply(LAMBDA(::vl_workflow_global::__vwsno2_OrderedLambda_Adder_(__vwsno_1)), x));
	}

	//-------------------------------------------------------------------

	__vwsno2_OrderedLambda_Adder_::__vwsno2_OrderedLambda_Adder_(::vl::vint32_t __vwsnctor___vwsno_1)
		:__vwsno_1(__vwsnctor___vwsno_1)
	{
	}

	::vl::vint32_t __vwsno2_OrderedLambda_Adder_::operator()(::vl::vint32_t __vwsno_2) const
	{
		return (__vwsno_1 + __vwsno_2);
	}
/***********************************************************************
Global Functions
***********************************************************************/

	::vl::vint32_t OrderedLambda::Apply(const ::vl::Func<::vl::vint32_t(::vl::vint32_t)>& f, ::vl::vint32_t arg)
	{
		return f(arg);
	}

	::vl::Func<::vl::vint32_t(::vl::vint32_t)> OrderedLambda::Adder(::vl::vint32_t x)
	{
		return LAMBDA(::vl_workflow_global::__vwsno1_OrderedLambda_Adder_(x));
	}

	::vl::WString OrderedLambda::main()
	{
		auto f = GLOBAL_NAME Adder(1);
		auto g = GLOBAL_NAME Adder(2);
		return ((((((::vl::__vwsn::ToString(f(1)) + ::vl::WString(L", ", false)) + ::vl::__vwsn::ToString(f(2))) + ::vl::WString(L", ", false)) + ::vl::__vwsn::ToString(g(1))) + ::vl::WString(L", ", false)) + ::vl::__vwsn::ToString(g(2)));
	}

	OrderedLambda& OrderedLambda::Instance()
	{
		return Getvl_workflow_global_OrderedLambda().instance;
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ
#undef USERIMPL

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif
