/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/BindSimple.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#ifndef VCZH_WORKFLOW_COMPILER_GENERATED_BINDSIMPLE
#define VCZH_WORKFLOW_COMPILER_GENERATED_BINDSIMPLE

#include "../Source/CppTypes.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses-equality"
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#endif

class Base;
class Derived;

class Base : public ::vl::Object, public ::vl::reflection::Description<Base>
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<Base>;
#endif
public:
	::vl::Ptr<::vl::reflection::description::IValueSubscription> subscription = ::vl::Ptr<::vl::reflection::description::IValueSubscription>();
	::vl::WString s = ::vl::WString(L"", false);
	void Initialize(::Derived* derived);
	Base();
};

class Derived : public ::Base, public ::vl::reflection::Description<Derived>
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	friend struct ::vl::reflection::description::CustomTypeDescriptorSelector<Derived>;
#endif
protected:
	::vl::Ptr<::test::ObservableValue> x = ::vl::Ptr<::test::ObservableValue>(new ::test::ObservableValue());
	::vl::Ptr<::test::ObservableValue> y = ::vl::Ptr<::test::ObservableValue>(new ::test::ObservableValue());
	::vl::Ptr<::test::ObservableValue> z = ::vl::Ptr<::test::ObservableValue>(new ::test::ObservableValue());
public:
	Derived();
	void Execute();
};

/***********************************************************************
Global Variables and Functions
***********************************************************************/

namespace vl_workflow_global
{
	class BindSimple
	{
	public:

		::vl::WString main();

		static BindSimple& Instance();
	};
}

/***********************************************************************
Reflection
***********************************************************************/

namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			DECL_TYPE_INFO(::Base)
			DECL_TYPE_INFO(::Derived)
#endif

			extern bool LoadBindSimpleTypes();
		}
	}
}

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#elif defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif
